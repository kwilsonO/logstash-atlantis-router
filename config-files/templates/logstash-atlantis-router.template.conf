input { 
   file {
	path => "/var/log/syslog*"
	start_position => beginning
	type => "atlantis-router"
   }


   exec {
	command => "bash /root/atlantis-analytics/logstash-atlantis-router/scripts/exec/disk-usage.sh"
	interval => 60
	type => "atlantis-router-exec-disk"
   }

   exec {
	command => "bash /root/atlantis-analytics/logstash-atlantis-router/scripts/exec/mem-usage.sh"
	interval => 15
	type => "atlantis-router-exec-mem"

   }
}


#TEMPLATE FIELDS
filter { 
	mutate { 
	add_field => { 'host-full-hostname' => 'INSTFULLHOST'  } 
	add_field => { 'host-inst-id' => 'INSTID' } 
	add_field => { 'host-inst-type' => 'INSTTYPE' } 
	add_field => { 'host-local-hostname' => 'INSTLOCALHST' } 
	add_field => { 'host-local-ipv4' => 'INSTLOCALIPV4' } 
	add_field => { 'host-mac-addr' => 'INSTMACADDR' } 
	add_field => { 'host-pub-hostname' => 'INSTPUBHOST' } 
	add_field => { 'host-pub-ipv4' => 'INSTPUBIP' } 
	add_field => { 'host-sec-groups' => 'INSTSECG' }  
	}
}

filter {
	grok {
		match => { "message" =>"%{SYSLOGTIMESTAMP:syslog-datetime} %{SYSLOGHOST:syslog-host} %{SYSLOGPROG:syslog-srcprog}: %{SYSLOGPROG:syslogprog}: %{IP:client_ip}:%{NUMBER:client_port:int} \[%{HAPROXYDATE:accept_date}\] %{NOTSPACE:frontend_name} %{NOTSPACE:backend_name}/%{NOTSPACE:server_name} %{NUMBER:time_request:int}/%{NUMBER:time_queue:int}/%{NUMBER:time_backend_connect:int}/%{NUMBER:time_backend_response:int}/%{NUMBER:time_duration:int} %{NUMBER:http_status_code:int} %{NUMBER:bytes_read:int} %{DATA:captured_request_cookie} %{DATA:captured_response_cookie} %{NOTSPACE:termination_state} %{NUMBER:actconn:int}/%{NUMBER:feconn:int}/%{NUMBER:beconn:int}/%{NUMBER:srvconn:int}/%{NUMBER:retries:int} %{NUMBER:srv_queue:int}/%{NUMBER:backend_queue:int} (\{%{HAPROXYCAPTUREDREQUESTHEADERS:req_head}\})?( )?(\{%{HAPROXYCAPTUREDRESPONSEHEADERS:resp_head}\})?( )?\"(<BADREQ>|(%{WORD:http_verb} (%{URIPROTO:http_proto}://)?(?:%{USER:http_user}(?::[^@]*)?@)?(?:%{URIHOST:http_host})?(?:%{URIPATHPARAM:http_request})?( HTTP/%{NUMBER:http_version})?))?\""	}
  
       }
}

filter {

	grok {
      		break_on_match => true	      
		match => { 'resp_head' => '([\|%{SPACE}]*)((?i:Ooyala\-Server\-Id):%{USERNAME:ooyala-server-id})([\|%{SPACE}]*)((?i:Ooyala\-Request\-Id):%{USERNAME:ooyala-request-id})([\|%{SPACE}]*)' }
         	match => { 'resp_head' => '([\|%{SPACE}]*)((?i:Ooyala\-Request\-Id):%{USERNAME:ooyala-request-id})([\|%{SPACE}]*)((?i:Ooyala\-Server\-Id):%{USERNAME:ooyala-server-id})([\|%{SPACE}]*)' }
		match => { 'req_head' => '([\|%{SPACE}]*)((?i:Ooyala\-Server\-Id):%{USERNAME:ooyala-server-id})([\|%{SPACE}]*)((?i:Ooyala\-Request\-Id):%{USERNAME:ooyala-request-id})([\|%{SPACE}]*)' }
         	match => { 'req_head' => '([\|%{SPACE}]*)((?i:Ooyala\-Request\-Id):%{USERNAME:ooyala-request-id})([\|%{SPACE}]*)((?i:Ooyala\-Server\-Id):%{USERNAME:ooyala-server-id})([\|%{SPACE}]*)' }
        }

}

filter {	

	date {

		match => [ 'syslog-datetime', 'MMM dd HH:mm:ss', 'dd/MMM/YYYY:HH:mm:ss.SSS', 'dd/MMM/YYYY:HH:mm:ss.SSSS', 'dd/MMM/YYYY:HH:mm:ss.SSSSS', 'dd/MMM/YYYY:HH:mm:ss.SSSSSS']
		target => '@timestamp'
	}

	ruby {
		code => "event['@timestamp'] = event['@timestamp'].utc"
	} 

	if "_grokparsefailure" in [tags] {
		mutate { add_field => { "from-logtype" => "router" } }
	}
}





filter {
        if [type] == "atlantis-router-exec-disk" {

                grok {
                        match => { 'message' => '/dev/xvda,%{NUMBER:dev-xvda-disk-total:int},%{NUMBER:dev-xvda-disk-used:int},%{NUMBER:dev-xvda-disk-available:int},%{NUMBER:dev-xvda-percentage-used:int}\%,%{DATA:dev-xvda-mounted-on}%{SPACE}/dev/xvdb,%{NUMBER:dev-xvdb-disk-total:int},%{NUMBER:dev-xvdb-disk-used:int},%{NUMBER:dev-xvdb-disk-available:int},%{NUMBER:dev-xvdb-percentage-used:int}\%,%{DATA:dev-xvdb-mounted-on}' }
                }


        } else if [type] == "atlantis-router-exec-mem" {
                grok {
                        match => { 'message' => '%{NUMBER:memory-total:int},%{NUMBER:memory-used:int},%{NUMBER:memory-free:int}' }
                }
      }
}

output {

      if [type] == "atlantis-router" {
	if "_grokparsefailure" in [tags] {
		elasticsearch { 
			cluster => "elasticsearch-atlantis"
			host => "ec2-54-83-111-222.compute-1.amazonaws.com"
			index => "parse-failures-router-%{host}"
		}

	} else {
		elasticsearch {
			cluster => "elasticsearch-atlantis" 
			host => "ec2-54-83-111-222.compute-1.amazonaws.com"
			index => "router-access-%{host}"
		}
	}
      } else if [type] == "atlantis-router-exec-disk" {
                elasticsearch {
                        cluster => "elasticsearch-atlantis"
                        host => "ec2-54-83-111-222.compute-1.amazonaws.com"
                        index => "routers-disk"
                }

      } else if [type] == "atlantis-router-exec-mem" {
                elasticsearch {
                        cluster => "elasticsearch-atlantis"
                        host => "ec2-54-83-111-222.compute-1.amazonaws.com"
                        index => "routers-memory"
                }

      }
}
